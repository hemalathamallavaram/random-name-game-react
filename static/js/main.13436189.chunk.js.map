{"version":3,"sources":["containers/Header/Header.tsx","containers/List/List.tsx","containers/Jumbotron/Jumbotron.tsx","containers/Seperator/Seperator.tsx","components/NameList/NameList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","List","props","name","onClick","event","removeName","Jumbotron","Seperator","NameList","state","names","chooseName","handleChangeName","bind","addNameToList","removeNameFromList","pickRandomName","this","setState","target","value","push","index","indexOf","splice","console","log","max","Math","floor","random","getRandomName","length","assignRandomName","map","key","id","onChange","type","placeholder","aria-describedby","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iRAWeA,MATf,WACE,OACE,yBAAKC,UAAU,eACf,0DACA,4BAAI,yF,uDCkBOC,MAhBf,SAAcC,GAEZ,OACE,wBAAIF,UAAU,mBACV,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACdE,EAAMC,MAEP,yBAAKH,UAAU,YACf,4BAAQI,QAAS,SAACC,GAAD,OAASH,EAAMI,WAAWD,IAAQL,UAAU,kBAA7D,mBCPGO,MARf,SAAmBL,GACnB,OACA,yBAAKF,UAAU,aACX,4BAAKE,EAAMC,QCGAK,MANf,WACE,OACE,8BC8GWC,E,YAnGX,aAAc,IAAD,8BACT,4CAAM,MACDC,MAAQ,CACTP,KAAK,GACLQ,MAAM,GACNC,WAAW,IAEf,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBAVb,E,8EAaIT,GACba,KAAKC,SAAS,CAAChB,KAAKE,EAAMe,OAAOC,U,sCAGjC,IAAIV,EAAK,YAAOO,KAAKR,MAAMC,OAC3BA,EAAMW,KAAKJ,KAAKR,MAAMP,MACtBe,KAAKC,SAAS,CACVR,MAAMA,M,yCAGKN,EAA0CF,GACzD,IAAIQ,EAAQO,KAAKR,MAAMC,MACjBY,EAAQZ,EAAMa,QAAQrB,GACxBoB,GAAS,GACTZ,EAAMc,OAAOF,EAAO,GAExBG,QAAQC,IAAIhB,GACZO,KAAKC,SAAS,CAACR,MAAMA,M,uCAER,IAAD,OACZe,QAAQC,IAAI,oBAYZD,QAAQC,IAPiB,WACrB,IAAIxB,EALa,SAACyB,GAClB,IAAIL,EAAQM,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAClD,OAAO,EAAKlB,MAAMC,MAAMY,GAGZS,CAAc,EAAKtB,MAAMC,MAAMsB,QAC3CP,QAAQC,IAAIxB,GACTA,IAAS,EAAKO,MAAME,YACnB,EAAKO,SAAS,CAACP,WAAWT,IAGtB+B,M,+BAEP,IAAD,OACAvB,EAAQO,KAAKR,MAAMC,MAAMwB,KAAI,SAAChC,EAAKoB,GACnC,OACI,kBAAC,EAAD,CAAMa,IAAKb,EACLpB,KAAMA,EACNG,WAAY,SAACD,GAAD,OAAS,EAAKW,mBAAmBX,EAAMF,SAGjE,OACI,yBAAKH,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,eACX,0BAAMA,UAAU,oBAChBqC,GAAG,gBADH,QAEA,2BAAOC,SAAUpB,KAAKL,iBACdQ,MAAOH,KAAKR,MAAMP,KAClBoC,KAAK,OACLvC,UAAU,eACVwC,YAAY,WACZC,mBAAiB,kBAE7B,kBAAC,EAAD,MACA,4BAAQzC,UAAU,kBACNI,QAASc,KAAKH,eAD1B,YAIA,kBAAC,EAAD,MACA,yBAAKf,UAAU,uBACX,yBAAKA,UAAU,iBAAf,iCACA,yBAAKA,UAAU,cACX,wBAAIA,UAAU,cACTW,KAIb,kBAAC,EAAD,MACA,4BAAQX,UAAU,kBAAkBI,QAASc,KAAKD,gBAAlD,sBACA,kBAAC,EAAD,MACA,yBAAKjB,UAAU,uBACX,yBAAKA,UAAU,iBAAf,4CACA,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAWG,KAAMe,KAAKR,MAAME,sB,GA1FjC8B,aCCRC,MAVf,WAEE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCEc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.13436189.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <div className=\"page-header\">\n    <h1>Enter names of your choice</h1>\n    <h2><small>play a game of choosing a random name from the list</small></h2>\n  </div>  \n  );\n}\n\nexport default Header;","\n\nimport React,{MouseEvent} from 'react';\nimport Button from '../Button/Button';\ninterface ButtonProps {\n    removeName: React.MouseEventHandler<HTMLButtonElement>\n    name:string\n  }\nfunction List(props:ButtonProps) {\n\n  return (\n    <li className=\"list-group-item\">\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n            {props.name}\n            </div>\n            <div className=\"col-md-6\">\n            <button onClick={(event)=>props.removeName(event)} className=\"btn btn-danger\">Remove Name</button>\n            </div >\n        </div>\n    </li>\n  );\n}\n\nexport default List;","import React from 'react';\n\nfunction Jumbotron(props:{name:string}) {\nreturn (\n<div className=\"jumbotron\">\n    <h1>{props.name}</h1>\n</div>  \n);\n}\n\nexport default Jumbotron;","import React from 'react';\n\nfunction Seperator() {\n  return (\n    <hr />\n  );\n}\n\nexport default Seperator;","import React, { Component } from 'react';\nimport './NameList.css';\nimport List from '../../containers/List/List';\nimport Jumbotron from '../../containers/Jumbotron/Jumbotron';\nimport Seperator from '../../containers/Seperator/Seperator';\n\ninterface IState {\n    names:string[],\n    name:string,\n    chooseName:string\n} \ninterface IProps{\n\n}\nclass NameList extends Component<IProps,IState>{\n    constructor(){\n        super({});\n        this.state = {\n            name:'',\n            names:[],\n            chooseName:''\n        }\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.addNameToList = this.addNameToList.bind(this);\n        this.removeNameFromList = this.removeNameFromList.bind(this);\n        this.pickRandomName = this.pickRandomName.bind(this);\n    }\n\n    handleChangeName(event:any){\n        this.setState({name:event.target.value});\n    }\n    addNameToList(){\n        let names = [...this.state.names];\n        names.push(this.state.name);\n        this.setState({\n            names:names\n        })\n    }\n    removeNameFromList(event:React.MouseEvent<HTMLButtonElement>,name:string){\n        let names = this.state.names;\n        const index = names.indexOf(name);\n        if (index > -1) {\n            names.splice(index, 1);\n          }\n        console.log(names);\n        this.setState({names:names});\n    }\n    pickRandomName(){\n        console.log('pick random name');\n        const getRandomName =(max:number) =>{\n            let index = Math.floor(Math.random() * Math.floor(max));\n            return this.state.names[index];\n          }\n        const assignRandomName = ()=> {\n            let name  = getRandomName(this.state.names.length)\n            console.log(name);\n            if(name !== this.state.chooseName){\n                this.setState({chooseName:name})\n            }\n        }\n        console.log(assignRandomName());\n    }\n    render(){\n        let names = this.state.names.map((name,index)=>{\n            return (\n                <List key={index} \n                      name={name}\n                      removeName={(event)=>this.removeNameFromList(event,name)} />\n            )\n        })\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    <div className=\"input-group\">\n                        <span className=\"input-group-addon\" \n                        id=\"basic-addon1\">Name</span>\n                        <input onChange={this.handleChangeName} \n                                value={this.state.name} \n                                type=\"text\" \n                                className=\"form-control\" \n                                placeholder=\"Username\" \n                                aria-describedby=\"basic-addon1\" />\n                    </div>\n                    <Seperator />\n                    <button className=\"btn btn-success\" \n                                onClick={this.addNameToList}>\n                        Add Name\n                    </button>\n                    <Seperator />\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-heading\">List of Names Entered by User</div>\n                        <div className=\"panel-body\">\n                            <ul className=\"list-group\">\n                                {names}\n                            </ul>\n                        </div>\n                    </div>\n                    <Seperator />\n                    <button className=\"btn btn-success\" onClick={this.pickRandomName}>Pick a Random Name</button>\n                    <Seperator />\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-heading\">This is the randomly choosen name by you</div>\n                        <div className=\"panel-body\">\n                            <Jumbotron name={this.state.chooseName}/>\n                        </div>\n                    </div>   \n                    </div>\n                </div>\n            </div>\n          );\n    }\n}\n\nexport default NameList;\n","import React from 'react';\nimport './App.css';\nimport Header from './containers/Header/Header';\n\nimport NameList from './components/NameList/NameList';\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <NameList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap3/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}